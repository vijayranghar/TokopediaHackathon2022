{"ast":null,"code":"var _jsxFileName = \"/Users/tokopedia/Documents/TestingGround/hackathon/src/pages/ErrorGame/pages/MemoryGame/Components/View.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport Modal from \"../shared/Modal\";\nimport { shuffleArray, IMAGES, levels, totalLevelsInGame, BEST_SCORE, convertSecondsToTime } from \"../constants\";\nimport { ACTION_TYPES, INITIAL_STATE, reducer } from \"../reducer\";\nimport LevelComplete from \"./LevelComplete\";\nimport LevelFailed from \"./LevelFailed\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlayGround = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const {\n    allImages,\n    currentScore,\n    currentLevel,\n    energy,\n    clicks,\n    isCurrentLevelCompleted,\n    time,\n    levelFailed,\n    restartGame,\n    currentLevelsTrack,\n    bestScore\n  } = state;\n  const [openedImages, setOpenedImage] = useState([]);\n  const [isModalOpen, setModal] = useState(false);\n  const clickTrack = levels[currentLevel].totalClicks;\n  const timeTrack = levels[currentLevel].time;\n  useEffect(() => {\n    if (bestScore < currentScore) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          bestScore: currentScore\n        }\n      });\n      localStorage.setItem(BEST_SCORE, currentScore);\n    }\n  }, [currentScore, bestScore]);\n  useEffect(() => {\n    const totalImagesUsed = IMAGES.slice(0, levels[currentLevel].totalImages);\n    const duplicateImagesList = totalImagesUsed.concat(totalImagesUsed);\n    const shuffledList = shuffleArray(duplicateImagesList);\n    const finalizedList = shuffledList.map((name, index) => {\n      return {\n        name,\n        close: false,\n        complete: false,\n        fail: false\n      };\n    });\n    dispatch({\n      type: ACTION_TYPES.DO_OPERATION,\n      payload: {\n        allImages: finalizedList,\n        time: timeTrack,\n        restartGame: false\n      }\n    });\n    setTimeout(() => {\n      const finalizedList = shuffledList.map((name, index) => {\n        return {\n          name,\n          close: true,\n          complete: false,\n          fail: false\n        };\n      });\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          allImages: finalizedList\n        }\n      });\n    }, 1000);\n  }, [currentLevel, restartGame, timeTrack]);\n  useEffect(() => {\n    if (time > 0 && !isCurrentLevelCompleted) {\n      const interval = setTimeout(() => {\n        dispatch({\n          type: ACTION_TYPES.DO_OPERATION,\n          payload: {\n            time: time - 1\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [time, isCurrentLevelCompleted]);\n\n  const handleClick = (name, index) => {\n    if (openedImages.length >= 2) {\n      return;\n    } else {\n      const updateOpenedImages = [...openedImages, {\n        name,\n        index\n      }];\n      const updatedImages = allImages.map((image, i) => {\n        if (index === i) image.close = false;\n        return image;\n      });\n      setOpenedImage(updateOpenedImages);\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          allImages: updatedImages\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (openedImages.length === 2) {\n      setTimeout(() => {\n        const updatedImages = [...allImages];\n\n        if (openedImages[0].name === openedImages[1].name && openedImages[0].index !== openedImages[1].index) {\n          updatedImages[openedImages[0].index].complete = true;\n          updatedImages[openedImages[1].index].complete = true;\n          dispatch({\n            type: ACTION_TYPES.DO_OPERATION,\n            payload: {\n              currentScore: currentScore + currentLevel,\n              currentLevelsTrack: currentLevelsTrack + 1\n            }\n          });\n        } else {\n          updatedImages[openedImages[0].index].close = true;\n          updatedImages[openedImages[1].index].close = true;\n        }\n\n        setOpenedImage([]);\n        dispatch({\n          type: ACTION_TYPES.DO_OPERATION,\n          payload: {\n            allImages: updatedImages,\n            ...(clickTrack && {\n              clicks: clicks + 1\n            })\n          }\n        });\n      }, 750);\n    }\n  }, [openedImages]);\n\n  const closeModal = () => {\n    setModal(false);\n  }; // update Energy\n\n\n  useEffect(() => {\n    if (currentLevelsTrack && currentLevelsTrack / currentLevel - allImages.length / 2 === 0) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          isCurrentLevelCompleted: true,\n          energy: energy + levels[currentLevel].bonus,\n          currentLevelsTrack: 0\n        }\n      });\n    }\n\n    if (currentLevelsTrack && currentLevelsTrack % 10 === 0) dispatch({\n      type: ACTION_TYPES.DO_OPERATION,\n      payload: {\n        energy: energy + 1\n      }\n    });\n  }, [currentLevelsTrack, allImages.length, currentLevel, energy]); // On level completion\n\n  useEffect(() => {\n    if (isCurrentLevelCompleted && !isModalOpen) setModal(true);\n  }, [isCurrentLevelCompleted, isModalOpen]); // When number of clicks exceed\n\n  useEffect(() => {\n    if (clicks === clickTrack && !isCurrentLevelCompleted) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          levelFailed: \"click exceed\"\n        }\n      });\n    }\n\n    if (time === 0 && !isCurrentLevelCompleted) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          levelFailed: \"timeout\"\n        }\n      });\n    }\n  }, [clicks, isCurrentLevelCompleted, time, clickTrack]);\n  useEffect(() => {\n    if (levelFailed && !isModalOpen) setModal(true);\n  }, [levelFailed, isModalOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      background: `${levels[currentLevel].color}`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"user-score-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Level: \", currentLevel, \"/\", totalLevelsInGame]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Energy: \", energy]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: [timeTrack ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time \", convertSecondsToTime(time)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 24\n        }, this) : null, clickTrack ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Flips: \", clicks, \" / \", clickTrack]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Current Score: \", currentScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Best Score: \", bestScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playground\",\n        children: allImages.map((framework, index) => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            framework: framework.name,\n            click: () => {\n              handleClick(framework.name, index);\n            },\n            close: framework.close,\n            complete: framework.complete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), isCurrentLevelCompleted ? /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      children: /*#__PURE__*/_jsxDEV(LevelComplete, {\n        dispatch: dispatch,\n        currentLevel: currentLevel,\n        clicks: clicks,\n        time: timeTrack - time,\n        closeModal: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this) : null, levelFailed ? /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(LevelFailed, {\n        currentLevel: currentLevel,\n        dispatch: dispatch,\n        clicks: clicks,\n        time: timeTrack - time,\n        levelFailed: levelFailed,\n        closeModal: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlayGround, \"mSSvytjP4m8X9WnD/nCxNBkDGPs=\");\n\n_c = PlayGround;\nexport default PlayGround;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayGround\");","map":{"version":3,"sources":["/Users/tokopedia/Documents/TestingGround/hackathon/src/pages/ErrorGame/pages/MemoryGame/Components/View.js"],"names":["React","useReducer","useEffect","useState","Card","Modal","shuffleArray","IMAGES","levels","totalLevelsInGame","BEST_SCORE","convertSecondsToTime","ACTION_TYPES","INITIAL_STATE","reducer","LevelComplete","LevelFailed","PlayGround","state","dispatch","allImages","currentScore","currentLevel","energy","clicks","isCurrentLevelCompleted","time","levelFailed","restartGame","currentLevelsTrack","bestScore","openedImages","setOpenedImage","isModalOpen","setModal","clickTrack","totalClicks","timeTrack","type","DO_OPERATION","payload","localStorage","setItem","totalImagesUsed","slice","totalImages","duplicateImagesList","concat","shuffledList","finalizedList","map","name","index","close","complete","fail","setTimeout","interval","clearInterval","handleClick","length","updateOpenedImages","updatedImages","image","i","closeModal","bonus","background","color","framework"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useState } from \"react\";\n\nimport Card from \"./Card\";\nimport Modal from \"../shared/Modal\";\n\nimport {\n  shuffleArray,\n  IMAGES,\n  levels,\n  totalLevelsInGame,\n  BEST_SCORE,\n  convertSecondsToTime\n} from \"../constants\";\nimport { ACTION_TYPES, INITIAL_STATE, reducer } from \"../reducer\";\nimport LevelComplete from \"./LevelComplete\";\nimport LevelFailed from \"./LevelFailed\";\n\nconst PlayGround = () => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n  const {\n    allImages,\n    currentScore,\n    currentLevel,\n    energy,\n    clicks,\n    isCurrentLevelCompleted,\n    time,\n    levelFailed,\n    restartGame,\n    currentLevelsTrack,\n    bestScore\n  } = state;\n  const [openedImages, setOpenedImage] = useState([]);\n  const [isModalOpen, setModal] = useState(false);\n\n  const clickTrack = levels[currentLevel].totalClicks;\n  const timeTrack = levels[currentLevel].time;\n\n  useEffect(() => {\n    if (bestScore < currentScore) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: { bestScore: currentScore }\n      });\n      localStorage.setItem(BEST_SCORE, currentScore);\n    }\n  }, [currentScore, bestScore]);\n\n  useEffect(() => {\n    const totalImagesUsed = IMAGES.slice(0, levels[currentLevel].totalImages);\n    const duplicateImagesList = totalImagesUsed.concat(totalImagesUsed);\n    const shuffledList = shuffleArray(duplicateImagesList);\n    const finalizedList = shuffledList.map((name, index) => {\n      return {\n        name,\n        close: false,\n        complete: false,\n        fail: false\n      };\n    });\n    dispatch({\n      type: ACTION_TYPES.DO_OPERATION,\n      payload: { allImages: finalizedList, time: timeTrack, restartGame: false }\n    });\n    setTimeout(() => {\n      const finalizedList = shuffledList.map((name, index) => {\n        return {\n          name,\n          close: true,\n          complete: false,\n          fail: false\n        };\n      });\n      dispatch({ type: ACTION_TYPES.DO_OPERATION, payload: { allImages: finalizedList} });\n    }, 1000);\n  }, [currentLevel, restartGame, timeTrack]);\n\n  useEffect(() => {\n    if (time > 0 && !isCurrentLevelCompleted) {\n      const interval = setTimeout(() => {\n        dispatch({\n          type: ACTION_TYPES.DO_OPERATION,\n          payload: { time: time - 1 }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [time, isCurrentLevelCompleted]);\n\n  const handleClick = (name, index) => {\n    if (openedImages.length >= 2) {\n      return;\n    } else {\n      const updateOpenedImages = [...openedImages, { name, index }];\n      const updatedImages = allImages.map((image, i) => {\n        if (index === i) image.close = false;\n        return image;\n      });\n      setOpenedImage(updateOpenedImages);\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: { allImages: updatedImages }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (openedImages.length === 2) {\n      setTimeout(() => {\n        const updatedImages = [...allImages];\n        if (\n          openedImages[0].name === openedImages[1].name &&\n          openedImages[0].index !== openedImages[1].index\n        ) {\n          updatedImages[openedImages[0].index].complete = true;\n          updatedImages[openedImages[1].index].complete = true;\n          dispatch({\n            type: ACTION_TYPES.DO_OPERATION,\n            payload: {\n              currentScore: currentScore + currentLevel,\n              currentLevelsTrack: currentLevelsTrack + 1\n            }\n          });\n        } else {\n          updatedImages[openedImages[0].index].close = true;\n          updatedImages[openedImages[1].index].close = true;\n        }\n        setOpenedImage([]);\n        dispatch({\n          type: ACTION_TYPES.DO_OPERATION,\n          payload: {\n            allImages: updatedImages,\n            ...(clickTrack && { clicks: clicks + 1 })\n          }\n        });\n      }, 750);\n    }\n  }, [openedImages]);\n\n  const closeModal = () => {\n    setModal(false);\n  };\n\n  // update Energy\n  useEffect(() => {\n    if (\n      currentLevelsTrack &&\n      currentLevelsTrack / currentLevel - allImages.length / 2 === 0\n    ) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: {\n          isCurrentLevelCompleted: true,\n          energy: energy + levels[currentLevel].bonus,\n          currentLevelsTrack: 0\n        }\n      });\n    }\n    if (currentLevelsTrack && currentLevelsTrack % 10 === 0)\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: { energy: energy + 1 }\n      });\n  }, [currentLevelsTrack, allImages.length, currentLevel, energy]);\n\n  // On level completion\n  useEffect(() => {\n    if (isCurrentLevelCompleted && !isModalOpen) setModal(true);\n  }, [isCurrentLevelCompleted, isModalOpen]);\n\n  // When number of clicks exceed\n  useEffect(() => {\n    if (clicks === clickTrack && !isCurrentLevelCompleted) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: { levelFailed: \"click exceed\" }\n      });\n    }\n    if (time === 0 && !isCurrentLevelCompleted) {\n      dispatch({\n        type: ACTION_TYPES.DO_OPERATION,\n        payload: { levelFailed: \"timeout\" }\n      });\n    }\n  }, [clicks, isCurrentLevelCompleted, time, clickTrack]);\n\n  useEffect(() => {\n    if (levelFailed && !isModalOpen) setModal(true);\n  }, [levelFailed, isModalOpen]);\n\n  return (\n    <div\n      className=\"container\"\n      style={{ background: `${levels[currentLevel].color}` }}\n    >\n      <header className=\"header\">\n        <h1>Memory Game</h1>\n      </header>\n      <section className=\"user-score-data\">\n        <div className=\"box\">\n          <p>\n            Level: {currentLevel}/{totalLevelsInGame}\n          </p>\n          <p>Energy: {energy}</p>\n        </div>\n        <div className=\"box\">\n          {timeTrack ? <p>Time {convertSecondsToTime(time)}</p> : null}\n          {clickTrack ? (\n            <p>\n              Flips: {clicks} / {clickTrack}\n            </p>\n          ) : null}\n        </div>\n        <div className=\"box\">\n          <p>Current Score: {currentScore}</p>\n          <p>Best Score: {bestScore}</p>\n        </div>\n      </section>\n      <div id=\"app\">\n        <div className=\"playground\">\n          {allImages.map((framework, index) => {\n            return (\n              <Card\n                framework={framework.name}\n                click={() => {\n                  handleClick(framework.name, index);\n                }}\n                close={framework.close}\n                complete={framework.complete}\n              />\n            );\n          })}\n        </div>\n        <div></div>\n      </div>\n      {isCurrentLevelCompleted ? (\n        <Modal isOpen={isModalOpen} onClose={closeModal}>\n          <LevelComplete\n            dispatch={dispatch}\n            currentLevel={currentLevel}\n            clicks={clicks}\n            time={timeTrack - time}\n            closeModal={closeModal}\n          />\n        </Modal>\n      ) : null}\n      {levelFailed ? (\n        <Modal>\n          <LevelFailed\n            currentLevel={currentLevel}\n            dispatch={dispatch}\n            clicks={clicks}\n            time={timeTrack - time}\n            levelFailed={levelFailed}\n            closeModal={closeModal}\n          />\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n\nexport default PlayGround;\n"]},"metadata":{},"sourceType":"module"}