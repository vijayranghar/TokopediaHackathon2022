{"ast":null,"code":"export const levels = {\n  1: {\n    number: 1,\n    message: \"\",\n    time: 100000,\n    totalClicks: 25,\n    totalImages: 4,\n    bonus: 10,\n    color: \"#03AC0E\" // 03AC0E // 519259\n\n  },\n  2: {\n    number: 2,\n    message: \"\",\n    time: 20,\n    totalClicks: 20,\n    totalImages: 8,\n    bonus: 10,\n    color: \"#c00\"\n  },\n  3: {\n    number: 3,\n    message: \"\",\n    time: 20,\n    totalClicks: 30,\n    totalImages: 8,\n    bomus: 50,\n    color: \"#c00\"\n  },\n  4: {\n    number: 4,\n    message: \"\",\n    time: 30,\n    totalClicks: 40,\n    totalImages: 8,\n    bomus: 100,\n    color: \"#c00\"\n  }\n};\nexport const BEST_SCORE = \"tkpd_b_s_m\";\nexport const totalLevelsInGame = Object.keys(levels).length;\nexport const IMAGES = [\"angular2\", \"vue\", \"react\", \"grunt\", \"phantomjs\", \"ember\", \"babel\", \"ionic\", \"gulp\", \"meteor\", \"yeoman\", \"yarn\", \"nodejs\", \"bower\", \"browserify\"];\nexport const shuffleArray = array => {\n  let currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n};\nexport const convertSecondsToTime = totalSeconds => {\n  let hours = Math.floor(totalSeconds / 3600);\n  totalSeconds %= 3600;\n  let minutes = Math.floor(totalSeconds / 60);\n  let seconds = totalSeconds % 60;\n\n  if (hours) {\n    return `${hours}:${minutes}:${seconds}`;\n  } else if (minutes) {\n    return `${minutes}:${seconds}`;\n  } else {\n    return seconds;\n  }\n};","map":{"version":3,"sources":["/Users/tokopedia/Documents/TestingGround/hackathon/src/pages/ErrorGame/pages/MemoryGame/constants/index.js"],"names":["levels","number","message","time","totalClicks","totalImages","bonus","color","bomus","BEST_SCORE","totalLevelsInGame","Object","keys","length","IMAGES","shuffleArray","array","currentIndex","randomIndex","Math","floor","random","convertSecondsToTime","totalSeconds","hours","minutes","seconds"],"mappings":"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","sourcesContent":["export const levels = {\n  1: {\n    number: 1,\n    message: \"\",\n    time: 100000,\n    totalClicks: 25,\n    totalImages: 4,\n    bonus: 10,\n    color: \"#03AC0E\"  // 03AC0E // 519259\n  },\n  2: {\n    number: 2,\n    message: \"\",\n    time: 20,\n    totalClicks: 20,\n    totalImages: 8,\n    bonus: 10,\n    color: \"#c00\"\n  },\n  3: {\n    number: 3,\n    message: \"\",\n    time: 20,\n    totalClicks: 30,\n    totalImages: 8,\n    bomus: 50,\n    color: \"#c00\"\n  },\n  4: {\n    number: 4,\n    message: \"\",\n    time: 30,\n    totalClicks: 40,\n    totalImages: 8,\n    bomus: 100,\n    color: \"#c00\"\n  }\n};\n\nexport const BEST_SCORE = \"tkpd_b_s_m\";\n\nexport const totalLevelsInGame = Object.keys(levels).length;\n\nexport const IMAGES = [\n  \"angular2\",\n  \"vue\",\n  \"react\",\n  \"grunt\",\n  \"phantomjs\",\n  \"ember\",\n  \"babel\",\n  \"ionic\",\n  \"gulp\",\n  \"meteor\",\n  \"yeoman\",\n  \"yarn\",\n  \"nodejs\",\n  \"bower\",\n  \"browserify\"\n];\n\nexport const shuffleArray = (array) => {\n  let currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex]\n    ];\n  }\n\n  return array;\n};\n\nexport const convertSecondsToTime = (totalSeconds) => {\n  let hours = Math.floor(totalSeconds / 3600);\n  totalSeconds %= 3600;\n  let minutes = Math.floor(totalSeconds / 60);\n  let seconds = totalSeconds % 60;\n  if (hours) {\n    return `${hours}:${minutes}:${seconds}`;\n  } else if (minutes) {\n    return `${minutes}:${seconds}`;\n  } else {\n    return seconds;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}